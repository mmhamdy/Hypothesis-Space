---
title: "Make scikit-learn faster using only two lines of code"
author: "Mohammed Hamdy"
date: "2022-12-19"
categories: [scikit-learn, python]
---

Yes! and no GPU involved. Intel has made an extension that can accelerate your scikit-learn code without any change to scikit-learn's api. This means that you can apply it to an already existing code without changing anything and still get an enhanced performance.

## How does this work?

Basically Intel has wrote its own CPU optimized algorithms but kept full conformance with all Scikit-Learn APIs and algorithms. What the introduced code does is replace Scikit-Learn's algorithms with Intel's new optimized versions of these algorithms. This is also known as **patching**.

So, does it work?. Let's see how *KMeans* is doing, starting with creating our own synthetic dataset of 10 million samples using Scikit-Learn's `make_blobs`.

```{python}
from sklearn.datasets import make_blobs

X, y = make_blobs(n_samples = 10_000_000, 
                  centers = 15, 
                  n_features = 2, 
                  random_state = 42)
```

Now all we need to do in order to use the optimized algorithm is to import the patch and use it.

::: {.callout-note}
Make sure to import scikit-learn after importing and calling the patch. Otherwise, the patching will not affect the original scikit-learn estimators.
:::

```{python}
from sklearnex import patch_sklearn
patch_sklearn()

from sklearn.cluster import KMeans
from timeit import default_timer as timer

start = timer()
kmeans = KMeans(n_clusters=15, random_state=12).fit(X)
time_diff = timer() - start
f"The elapsed time for the optimized model is: {time_diff:.2f} s"
```

But what about the original algorithm?

To get back to using our original Scikit-Learn algorithms, all we need to do is just opt out of using the patch by simply **unpatching**.
Again, make sure to reimport Scikit-Learn after you unpatch.

Let's now see how much time will it take the original algorithm.

```{python}
from sklearnex import unpatch_sklearn
unpatch_sklearn()

from sklearn.cluster import KMeans

start = timer()
kmeans = KMeans(n_clusters=15, random_state=12).fit(X)
time_diff = timer() - start
f"The elapsed time for Scikit-Learn's original model is: {time_diff:.2f} s"
```

The optimized algorithm is almost 10 times faster than the original one. For more informative comparison, check [Benchmarking Intel Extension for Scikit-learn](https://www.intel.com/content/www/us/en/developer/articles/technical/benchmarking-intel-extension-for-scikit-learn.html) article by Intel.

## This is great but...

Unfortunately, not all algorithms in Scikit-Learn are affected by the patch. For a list of supported algorithms check: [Supported Algorithms](https://intel.github.io/scikit-learn-intelex/algorithms.html)

